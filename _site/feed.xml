<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-08-14T18:38:35-07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">üçí Han‚Äôs Generative AI Quest</title><subtitle>I chronicle my captivating journey through Generative AI, sharing insights,  breakthroughs, and learnings from my enthralling side projects in the field. 
</subtitle><entry><title type="html">Build On-Device QnA with LangChain and Llama2</title><link href="http://localhost:4000/chatbot/2023/08/14/food-qna-on-device-llm.html" rel="alternate" type="text/html" title="Build On-Device QnA with LangChain and Llama2" /><published>2023-08-14T00:00:00-07:00</published><updated>2023-08-14T00:00:00-07:00</updated><id>http://localhost:4000/chatbot/2023/08/14/food-qna-on-device-llm</id><content type="html" xml:base="http://localhost:4000/chatbot/2023/08/14/food-qna-on-device-llm.html"><![CDATA[<h3 id="tldr">TL;DR</h3>
<p>This post involves creating a Question and Answering system using the LLM model hosted on Apple M1 Pro. The code repository contains the necessary components, including the LLM model (<a href="https://huggingface.co/TheBloke/Llama-2-7B-Chat-GGML">llama-2-7b-chat.ggmlv3.q8_0.bin</a>), an embedding model (<a href="https://huggingface.co/sentence-transformers/all-MiniLM-L6-v2">sentence-transformers/all-MiniLM-L6-v2</a>), and an on-device vector database (<a href="https://github.com/facebookresearch/faiss">FAISS</a>). The app is built using the ‚ÄúLangChain‚Äù framework. All components are open source, eliminating the need for OpenAI services. The system‚Äôs performance is similar to OpenAI but with 10x longer latency (around 60s/query vs 5s/query) due to on-device model inference.</p>

<h3 id="introduction">Introduction</h3>
<p>Third-party commercial large language model (LLM) providers, such as OpenAI‚Äôs GPT-4, Google Bard, and Amazon AlexaTM, have greatly democratized access to LLM capabilities through seamless API integration and scalable model inference hosting in the cloud. These advanced LLMs possess the remarkable ability to <strong>comprehend</strong>, <strong>learn from</strong>, and <strong>produce text</strong> that is nearly indistinguishable from human-generated content. Beyond their text generation prowess, these LLMs excel in <strong>interactive conversations</strong>, <strong>question answering</strong>, <strong>dialogue</strong> and <strong>document summarization</strong>, as well as <strong>offering insightful recommendations</strong>. Their versatility finds applications across diverse tasks and industries including creative copywriting for marketing, precise document summarization for legal purposes, data-driven market research in the financial sector, realistic simulation of clinical trials within healthcare, and even code generation for software development.</p>

<p>However, certain scenarios, driven by an increasing emphasis on safeguarding data privacy and adhering to stringent regulatory compliance standards, highlight the necessity of deploying LLMs on private hardware devices instead of on any of those third-party owned servers. In such instances, <strong>maintaining sensitive information within the confines of the user‚Äôs hardware</strong> not only mitigates the risks associated with data breaches and unauthorized access but also aligns with the evolving landscape of privacy-conscious technical practices. This approach <strong>fosters a sense of trust among users who are becoming more attuned to the importance of maintaining their personal information within their own environments</strong>.</p>

<p>In this post, our focus lies in exploring the execution of quantized variants of open-source Llama2 models on local devices to achieve Retrieval Augmented Generation (RAG). For RAG powered by server-side LLMs, you can find more info in <a href="https://bearbearyu1223.github.io/chatbot/2023/07/31/food-qna-on-server-llm.html">my previous post</a>.</p>

<h3 id="llama2-and-its-variants">Llama2 and Its variants</h3>
<p><a href="https://ai.meta.com/resources/models-and-libraries/llama/">Llama 2</a>, launched by Meta in July 2023, has been pretrained on publicly available online data sources, encompassing a staggering <strong>2 trillion tokens with a context length of 4096</strong>. The subsequent supervised fine-tuned iteration of this model, known as Llama-2-chat, underwent meticulous refinement through the integration of over <em>1 million human annotations</em> to cater specifically to <strong>chat-oriented use cases</strong>. Meta has extended the accessibility of Llama 2 to a wide spectrum of users, ranging from individual developers and content creators to researchers and businesses. This strategic open-source initiative is aimed at fostering an ecosystem conducive to <a href="https://ai.meta.com/static-resource/responsible-use-guide/">Responsible AI experimentation</a>, innovation, and the scalable implementation of a diverse array of ideas, thus further <strong>democratizing Generative AI</strong>.</p>

<p>Llama 2 is offered in an array of parameter sizes ‚Äî 7B, 13B, and 70B ‚Äî alongside both pretrained and fine-tuned variations to cater to a wide range of application needs.</p>

<h3 id="framework-and-libraries-used-langchain-ggml-c-transformers">Framework and Libraries Used: LangChain, GGML, C Transformers</h3>
<p><a href="https://python.langchain.com/docs/get_started/introduction.html">LangChain</a> is an open source framework for developing applications powered by LLMs. It goes beyond standard API calls by being <em>data-aware</em>, enabling connections with various data sources for richer, personalized experiences. It is also <em>agentic</em>, meaning it can empower a language model to interact dynamically with its environment. LangChain streamlines the development of diverse applications, such as chatbots, Generative Question and Answering (GQA), and summarization. By ‚Äúchaining‚Äù components from multiple modules, it allows for the creation of unique applications built around an LLM with <strong>easy-to-code</strong> and <strong>fast-to-production</strong> developer experience.</p>

<p><a href="https://github.com/ggerganov/ggml">GGML</a> is a C library for machine learning (ML). GGML makes use of a technique called <strong>‚Äúquantization‚Äù</strong> (e.g., convert LLM‚Äôs weights from high-precison floating numbers to low-precision floating numbers) that allows for large language models to run on consumer hardware. GGML supports a number of different quantization strategies (e.g. 4-bit, 5-bit, and 8-bit quantization), each of which offers different <em>trade-offs between efficiency and performance</em>. More information about these trade-offs (such as model disk size and inference speed) can be found in <a href="https://github.com/ggerganov/llama.cpp">the documentation for llama.cpp</a>.</p>

<p><a href="https://github.com/marella/ctransformers">C Transformers</a> is a wrapper that provides the Python bindings for the Transformer models implemented in C/C++ using GGML. 
C Transformers supports running Llama2 model inference via GPU, for both NVIDIA GPU (via CUDA, a programming language for NVIDIA GPUs) and Apple‚Äôs own integreated GPU and Neural Engine (via Metal, a programming language for Apple integrated GPUs).</p>

<p>Note: To enable Metal Support for model inference running on Apple M1/M2 chip, need run the following cmd under your project root</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>poetry config --local installer.no-binary ctransformers

poetry add ctransformers 
</code></pre></div></div>

<h3 id="retrieval-augmented-generation">Retrieval Augmented Generation</h3>
<p>Retrieval Augmented Generation (RAG) represents a technique wherein data is retrieved from external sources to enhance and expand the prompts used in model generation. This method is not only a cost-effective alternative but also proves to be an efficient approach in comparison to the traditional methods of pre-training or fine-tuning foundation models.
See the previous post at <a href="https://bearbearyu1223.github.io/chatbot/2023/07/31/food-qna-on-server-llm.html">Food QnA Chatbot : Help Answer Food Related Questions from Your Own Cookbook</a> as a brief into to RAG.</p>

<h3 id="an-example-project">An Example Project</h3>
<p>The source code for the example project can be find on <a href="https://github.com/bearbearyu1223/langchain_playground/tree/main/food_qna_on_device"><img src="https://img.shields.io/badge/github-%23121011.svg?style=for-the-badge&amp;logo=github&amp;logoColor=white" alt="GitHub" /></a>. The project directory should look like below:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>food_qna_on_device
‚îú‚îÄ‚îÄ README.md
‚îú‚îÄ‚îÄ build_knowledge_base.py
‚îú‚îÄ‚îÄ config.py
‚îú‚îÄ‚îÄ cook_book_data
‚îÇ   ‚îú‚îÄ‚îÄ GCE-Dinner-in-30-EXPANDED-BLAD.pdf
‚îÇ   ‚îú‚îÄ‚îÄ Quick-Easy-Weeknight-Meals-1.pdf
‚îÇ   ‚îî‚îÄ‚îÄ dinners_cookbook_508-compliant.pdf
‚îú‚îÄ‚îÄ main.py
‚îú‚îÄ‚îÄ models
‚îÇ   ‚îú‚îÄ‚îÄ llama-2-13b-chat.ggmlv3.q8_0.bin
‚îÇ   ‚îî‚îÄ‚îÄ llama-2-7b-chat.ggmlv3.q8_0.bin
‚îú‚îÄ‚îÄ poetry.lock
‚îú‚îÄ‚îÄ poetry.toml
‚îú‚îÄ‚îÄ pyproject.toml
‚îî‚îÄ‚îÄ vector_db
    ‚îú‚îÄ‚îÄ index.faiss
    ‚îî‚îÄ‚îÄ index.pkl
</code></pre></div></div>

<p>Instruction to run the example project:</p>
<ul>
  <li>Step 1: Launch the terminal from the project directory, install and resolve the dependencies as defined in <code class="language-plaintext highlighter-rouge">pyproject.toml</code> file via
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>poetry install
</code></pre></div>    </div>
  </li>
  <li>Step 2: Download the quantized 7b model <code class="language-plaintext highlighter-rouge">llama-2-7b-chat.ggmlv3.q8_0.bin</code> from https://huggingface.co/TheBloke/Llama-2-7B-Chat-GGML and save the model under the directory <code class="language-plaintext highlighter-rouge">models\</code></li>
  <li>Step 3: To start parsing user queries into the application, run the following command from the project directory (note: the model inference can take ~1 mins per input query)
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>poetry run python main.py -c local 
</code></pre></div>    </div>
    <p>Optionally, to run the same query with OpenAI (note: the model inference will take a few seconds per input query, you will also need export OPENAI_API_KEY as an enviroment variable on your local dev machine)</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>poetry run python main.py -c server
</code></pre></div>    </div>
  </li>
  <li>Step 4: Enter a query related to food preparation and cooking into the console and start playing with it. 
See an example below:
Screenshot of the original content for making ‚ÄúPumpkin Biscuits‚Äù. 
 <img src="/assets/picture/2023_08_14_food_qna_on_device_llm/original.png" alt="Original Content" />
Retrieval Augmented Generation by running Llama2 model inference on local device
 <img src="/assets/picture/2023_08_14_food_qna_on_device_llm/response.png" alt="Response" /></li>
</ul>]]></content><author><name>[&quot;Han Yu&quot;]</name></author><category term="chatbot" /><summary type="html"><![CDATA[TL;DR This post involves creating a Question and Answering system using the LLM model hosted on Apple M1 Pro. The code repository contains the necessary components, including the LLM model (llama-2-7b-chat.ggmlv3.q8_0.bin), an embedding model (sentence-transformers/all-MiniLM-L6-v2), and an on-device vector database (FAISS). The app is built using the ‚ÄúLangChain‚Äù framework. All components are open source, eliminating the need for OpenAI services. The system‚Äôs performance is similar to OpenAI but with 10x longer latency (around 60s/query vs 5s/query) due to on-device model inference.]]></summary></entry><entry><title type="html">Food QnA Chatbot : Help Answer Food Related Questions from Your Own Cookbook</title><link href="http://localhost:4000/chatbot/2023/07/31/food-qna-on-server-llm.html" rel="alternate" type="text/html" title="Food QnA Chatbot : Help Answer Food Related Questions from Your Own Cookbook" /><published>2023-07-31T00:00:00-07:00</published><updated>2023-07-31T00:00:00-07:00</updated><id>http://localhost:4000/chatbot/2023/07/31/food-qna-on-server-llm</id><content type="html" xml:base="http://localhost:4000/chatbot/2023/07/31/food-qna-on-server-llm.html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Retrieval Augmented Generation (RAG) is a powerful technique that allows you to enhance your prompts by retrieving data from external sources and incorporating it into the context. The external data used for augmentation can be gathered from diverse sources such as document repositories, databases, or web search results.</p>

<p>To begin with RAG, you need to convert your documents and user queries into a compatible format to perform relevancy search. This involves converting both the document collection, or knowledge base, and user-submitted queries into numerical representations using embedding. Embedding is a process that assigns numerical values to text, placing them in a vector space.</p>

<p>RAG model architectures then compare the embeddings of user queries with those ‚Äúvector index‚Äù of the knowledge base. By doing so, they identify similar documents in the knowledge base that are relevant to the user‚Äôs prompt. These relevant contents from similar documents are appended to the original user prompt.</p>

<p>Finally, the augmented prompt, which now includes the relevant retrieved content, is passed on to the foundation model to generate the final responses. This integration of retrieval and generation significantly improves the quality and relevance of the model‚Äôs outputs. Below is an illustrative diagram that demonstrates the overall RAG (Retrieval Augmented Generation) process. <img src="/assets/picture/2023_07_31_food_qna_on_server_llm/Retrieval_Augmented_Generation.png" alt="Retrieval Augmented Generation" />.</p>

<h2 id="an-example-project-for-rag">An Example Project for RAG</h2>
<p>I have created an example project to provide a practical demonstration of how RAG works. For more detailed information and insights into the project, you can find comprehensive documentation and additional resources on <a href="https://github.com/bearbearyu1223/food_qna_powered_by_llm"><img src="https://img.shields.io/badge/github-%23121011.svg?style=for-the-badge&amp;logo=github&amp;logoColor=white" alt="GitHub" /></a>. This exmaple project will walk you through the RAG process, the data preparation steps, the relevancy search implementation, and how the augmented prompts lead to more contextually, more relevant, and more conversational responses from the foundation model. Please feel free to clone this project on GitHub, and follow the steps below to explore or develope it further.</p>

<h2 id="set-up-local-virtual-environment">Set Up Local Virtual Environment</h2>
<ul>
  <li>Step 1: Install Miniconda on MacOS, see instruction <a href="https://docs.conda.io/en/latest/miniconda.html">here</a>.</li>
  <li>Step 2: Create a default conda env with Python 3.9:
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda create <span class="nt">--name</span> food_qna_app <span class="nv">python</span><span class="o">=</span>3.9 <span class="nt">-y</span>
</code></pre></div>    </div>
  </li>
  <li>Step 3: Activate the conda env created above: 
<code class="language-plaintext highlighter-rouge">conda activate food_qna_app</code></li>
  <li>Step 4: Install first set of required libraries in the conda env:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip3 install -r requirements.txt
</code></pre></div>    </div>
  </li>
  <li>Step 5: Deactivate the conda env when you are done (note: you need activate this virtual env to work on the app)
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda deactivate 
</code></pre></div>    </div>
    <h2 id="set-up-open-ai-secrete-for-local-dev">Set Up Open AI Secrete for Local Dev</h2>
    <p><code class="language-plaintext highlighter-rouge">OPENAI_API_KEY</code> will be needed when calling the OpenAI API endpoint for generating embeddings for the documents, so do recommend exporting <code class="language-plaintext highlighter-rouge">OPENAI_API_KEY</code> as an enviroment variable on your local dev machine; also, we will need create a <code class="language-plaintext highlighter-rouge">secrets.toml</code> file and add the <code class="language-plaintext highlighter-rouge">OPENAI_API_KEY</code> there, so the streamlit app can pick up the API key when send requests to OpenAI endpoint during runtime.</p>
  </li>
  <li>Step 1: Export <code class="language-plaintext highlighter-rouge">OPENAI_API_KEY</code> as an enviroment variable on your local dev machine</li>
  <li>Step 2: Create <code class="language-plaintext highlighter-rouge">.streamlit</code> directory under the root repo
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd food_qna_chatbot_demo 
mkdir .streamlit
</code></pre></div>    </div>
  </li>
  <li>Step 3: Create <code class="language-plaintext highlighter-rouge">secrets.toml</code> file under <code class="language-plaintext highlighter-rouge">.streamlit</code> directory and add your <code class="language-plaintext highlighter-rouge">OPENAI_API_KEY</code> there
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>OPENAI_API_KEY=&lt;YOUR_OPENAI_API_KEY_HERE&gt;
</code></pre></div>    </div>
  </li>
  <li>Step 4: To reduce the risk of accidentally committing your secrets to your repo, add <code class="language-plaintext highlighter-rouge">.streamlit</code> to your <code class="language-plaintext highlighter-rouge">.gitignore</code> file.
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>echo ".streamlit/" &gt;&gt; .gitignore
</code></pre></div>    </div>
    <h2 id="set-up-the-redis-database-on-your-local-dev-machine">Set up the Redis Database on your local dev machine</h2>
  </li>
  <li>Step 1: <a href="https://docs.docker.com/desktop/install/mac-install/">Install Docker Desktop on Mac</a>, and start the docker desktop.</li>
  <li>Step 2: We‚Äôre going to use Redis as our database for both document contents and the vector embeddings. You will need the full Redis Stack to enable use of Redisearch, which is the module that allows semantic search - more detail is in the docs for <a href="https://redis.io/docs/stack/get-started/install/docker/">Redis Stack</a>. Run the following command in your terminal to start the docker container:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run -d --name redis-stack -p 127.0.0.1:6379:6379 -p 8001:8001 redis/redis-stack:latest
</code></pre></div>    </div>
  </li>
  <li>Step 3: Initiate a Redis connection and create a Hierarchical Navigable Small World (HNSW) index for semantic search using a recipe book which can be found under the directory <code class="language-plaintext highlighter-rouge">cook_book_data</code>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python build_knowledge_base.py
</code></pre></div>    </div>
    <p>If the recipe book is indexed succefully into the DB, you should expect the following info printed out in the console:</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>===
Number of documents indexed in the DB: 144
</code></pre></div>    </div>
    <h2 id="run-the-app">Run the APP</h2>
    <p>In your terminal, run the App by</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>streamlit run food_qna_app.py
</code></pre></div>    </div>
    <p>You can start asking questions related to food preparation and cooking, and also some follow up questions. See screenshot below.</p>
  </li>
</ul>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Original Content</th>
      <th style="text-align: left">Chat History - first turn</th>
      <th style="text-align: left">Chat History - follow up</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left"><img src="/assets/picture/2023_07_31_food_qna_on_server_llm/original_content.png" alt="Original Content" /></td>
      <td style="text-align: left"><img src="/assets/picture/2023_07_31_food_qna_on_server_llm/chat_history_1.png" alt="Chat History" /></td>
      <td style="text-align: left"><img src="/assets/picture/2023_07_31_food_qna_on_server_llm/chat_history_2.png" alt="Chat History" /></td>
    </tr>
  </tbody>
</table>]]></content><author><name>[&quot;Han Yu&quot;]</name></author><category term="chatbot" /><summary type="html"><![CDATA[Introduction Retrieval Augmented Generation (RAG) is a powerful technique that allows you to enhance your prompts by retrieving data from external sources and incorporating it into the context. The external data used for augmentation can be gathered from diverse sources such as document repositories, databases, or web search results.]]></summary></entry></feed>